/*
 * Démo Design-first du service web de billetterie de concerts
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ConcertDetail from '../model/ConcertDetail';
import Concerts from '../model/Concerts';

/**
* Concerts service.
* @module api/ConcertsApi
* @version 0.0.1
*/
export default class ConcertsApi {

    /**
    * Constructs a new ConcertsApi. 
    * @alias module:api/ConcertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the concertsIdGet operation.
     * @callback moduleapi/ConcertsApi~concertsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConcertDetail{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir le détail d&#x27;un concert
     * @param {Number} id 
     * @param {module:api/ConcertsApi~concertsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    concertsIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling concertsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/hal+json'];
      let returnType = ConcertDetail;

      return this.apiClient.callApi(
        '/concerts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllConcerts operation.
     * @callback moduleapi/ConcertsApi~getAllConcertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Concerts{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtenir la liste des concerts à venir
     * @param {module:api/ConcertsApi~getAllConcertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllConcerts(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/hal+json'];
      let returnType = Concerts;

      return this.apiClient.callApi(
        '/concerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}